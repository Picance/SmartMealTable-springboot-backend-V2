#!/bin/bash

##############################################################################
# SmartMealTable API Documentation Deployment Script
# 
# This script automates the process of:
# 1. Running REST Docs tests
# 2. Generating HTML documentation
# 3. Copying to docs/ directory for GitHub Pages
##############################################################################

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Print functions
print_header() {
    echo -e "\n${GREEN}========================================${NC}"
    echo -e "${GREEN}$1${NC}"
    echo -e "${GREEN}========================================${NC}\n"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "$1"
}

# Main script
print_header "SmartMealTable API Documentation Deployment"

# Check if .env file exists
if [ ! -f .env ]; then
    print_error ".env file not found!"
    print_info "Please copy .env.example to .env and configure it."
    exit 1
fi
print_success ".env file exists"

# Step 1: Clean previous build
print_header "Step 1: Cleaning previous build"
./gradlew :smartmealtable-api:clean
print_success "Clean completed"

# Step 2: Run REST Docs tests (optional - skip if snippets exist)
if [ "$1" != "--skip-tests" ]; then
    print_header "Step 2: Running REST Docs tests"
    print_warning "This may take several minutes..."
    
    # Set environment variables for tests
    export KAKAO_CLIENT_ID=$(grep KAKAO_CLIENT_ID .env | cut -d '=' -f2)
    export KAKAO_REDIRECT_URI=$(grep KAKAO_REDIRECT_URI .env | cut -d '=' -f2)
    export GOOGLE_CLIENT_ID=$(grep GOOGLE_CLIENT_ID .env | cut -d '=' -f2)
    export GOOGLE_CLIENT_SECRET=$(grep GOOGLE_CLIENT_SECRET .env | cut -d '=' -f2)
    export GOOGLE_REDIRECT_URI=$(grep GOOGLE_REDIRECT_URI .env | cut -d '=' -f2)
    export VERTEX_AI_PROJECT_ID=$(grep VERTEX_AI_PROJECT_ID .env | cut -d '=' -f2)
    export VERTEX_AI_MODEL=$(grep VERTEX_AI_MODEL .env | cut -d '=' -f2)
    export VERTEX_AI_TEMPERATURE=$(grep VERTEX_AI_TEMPERATURE .env | cut -d '=' -f2)
    export VERTEX_AI_LOCATION=$(grep VERTEX_AI_LOCATION .env | cut -d '=' -f2)
    
    if ./gradlew :smartmealtable-api:test --tests '*RestDocsTest'; then
        print_success "All REST Docs tests passed"
    else
        print_error "Some tests failed. Check the logs above."
        print_info "You can skip tests by running: $0 --skip-tests"
        exit 1
    fi
else
    print_warning "Skipping tests (--skip-tests flag detected)"
    print_info "Make sure build/generated-snippets directory exists"
fi

# Step 3: Create snippets directory if it doesn't exist
print_header "Step 3: Ensuring snippets directory exists"
SNIPPETS_DIR="smartmealtable-api/build/generated-snippets"
if [ ! -d "$SNIPPETS_DIR" ]; then
    print_warning "Snippets directory doesn't exist. Creating..."
    mkdir -p "$SNIPPETS_DIR"
    print_success "Created snippets directory"
else
    print_success "Snippets directory exists"
fi

# Step 4: Generate AsciiDoc HTML
print_header "Step 4: Generating HTML documentation"
if ./gradlew :smartmealtable-api:asciidoctor; then
    print_success "HTML documentation generated"
else
    print_error "Failed to generate HTML documentation"
    exit 1
fi

# Step 5: Check if HTML was generated
HTML_SOURCE="smartmealtable-api/build/docs/asciidoc/index.html"
if [ ! -f "$HTML_SOURCE" ]; then
    print_error "Generated HTML not found at: $HTML_SOURCE"
    exit 1
fi
print_success "Found generated HTML"

# Step 6: Copy to docs directory
print_header "Step 5: Copying to docs/ directory"
DOCS_DIR="docs"
mkdir -p "$DOCS_DIR"
cp "$HTML_SOURCE" "$DOCS_DIR/api-docs.html"
print_success "Copied api-docs.html to docs/"

# Step 7: Generate deployment summary
print_header "Step 6: Generating deployment summary"
cat > "$DOCS_DIR/DEPLOY_INFO.txt" << EOF
SmartMealTable API Documentation Deployment
===========================================

Deployment Date: $(date '+%Y-%m-%d %H:%M:%S')
Generated By: $(whoami)
Git Commit: $(git rev-parse --short HEAD 2>/dev/null || echo "N/A")
Git Branch: $(git branch --show-current 2>/dev/null || echo "N/A")

Files:
- api-docs.html: Full API documentation (generated from Spring REST Docs)
- README.md: Documentation index and quick start guide

Next Steps:
1. Review the generated documentation: docs/api-docs.html
2. Commit changes: git add docs/ && git commit -m "docs: Update API documentation"
3. Push to GitHub: git push origin main
4. Enable GitHub Pages: Settings > Pages > Source: main/docs

For more information, see docs/README.md
EOF
print_success "Created DEPLOY_INFO.txt"

# Final summary
print_header "Deployment Complete!"
echo -e "${GREEN}Documentation deployed successfully!${NC}\n"
echo "📄 Generated files:"
echo "   - docs/api-docs.html"
echo "   - docs/README.md"
echo "   - docs/DEPLOY_INFO.txt"
echo ""
echo "📝 Next steps:"
echo "   1. Review: open docs/api-docs.html"
echo "   2. Commit: git add docs/ && git commit -m 'docs: Update API documentation'"
echo "   3. Push: git push origin main"
echo "   4. Enable GitHub Pages in repository settings"
echo ""
echo -e "${YELLOW}Note: Make sure to configure GitHub Pages (Settings > Pages > Source: main/docs)${NC}"
